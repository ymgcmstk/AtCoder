// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define MOD 1000000007
using namespace std;

template <typename T> void input_array(T * p){
  int a = sizeof(p) / sizeof(p[0]);
  rep(i, a){
    cin >> p[i];
  }
}

void input_vector(vector<int> * p, int a){
  rep(i, a){
    int input;
    cin >> input;
    p -> push_back(input);
  }
}

template <typename T>
void output(T a, int precision) {
  if (precision > 0) {
    cout << setprecision(precision)  << a << "\n";
  } else {
    cout << a << "\n";
  }
}

int main() {
  int N, T;
  cin >> N >> T;
  int S1[N];
  int S2[N];
  fill(S1, S1+N, T+1);
  fill(S2, S2+N, T+1);
  bool flg;
  int flg_ind;
  int A[N], B[N];
  rep(i, N) {
    cin >> A[i] >> B[i];
  }
  rep(i, N) {
    S2[0] = A[0];
    repd(j, 1, N) S2[j] = S2[j-1] + A[j];
    if (S2[N-1] <= T) {
      cout << 0 << endl;
      return 0;
    }
    rep(j, N) S1[j] = S2[j];
  }
  repd(i, 1, N) {
    flg = true;
    flg_ind = N;
    S2[i-1] = T+1;
    repd(j, i-1, N) {
      S2[j] = min(S1[j-1] + B[j], S2[j-1] + A[j]);
      if (S2[j] > T) {
        flg = false;
        flg_ind = j;
        break;
      }
    }
    if (flg) {
      cout << i << endl;
      return 0;
    }
    rep(j, N) S1[j] = S2[j];
  }
  cout << -1 << endl;
  return 0;
}

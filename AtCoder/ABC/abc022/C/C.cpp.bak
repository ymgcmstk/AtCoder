// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define BN 1000000007
using namespace std;

bool boolfunc(bool a, int b){
  if (b < 0) return false;
  else return a;
}

int input_value(){
  int a;
  cin >> a;
  return a;
}

void input_array(int * p, int a){
  rep(i, a){
    cin >> p[i];
  }
}

void input_vector(vector<int> * p, int a){
  rep(i, a){
    int input;
    cin >> input;
    p -> push_back(input);
  }
}

template <typename T>
void output(T a, int precision) {
  if(precision > 0){
    cout << setprecision(precision)  << a << "\n";
  } else {
    cout << a << "\n";
  }
}

int main() {
  int N, M;
  cin >> N >> M;
  int H[N][N];
  int t_x, t_y, t_s;
  int P[N];
  rep(i, M) {
    rep(j, M) {
      H[i][j] = 100000;
    }
  }
  rep(i, M) {
    cin >> t_x >> t_y >> t_s;
    t_x -= 1;
    t_y -= 1;
    H[t_x][t_y] = t_s;
    H[t_y][t_x] = t_s;
    cout << t_x << ' ' << t_y << ' ' << t_s << endl;
  }
  int fans = 100000;
  repd(i, 1, N-1) {
    bool flg = true;
    if (H[0][i] > 10000) continue;
    rep(j, N) P[j] = 100000;
    P[i] = H[0][i];
    while (flg) {
      flg = false;
      rep (j, N) {
        rep(k, N) {
          if (j == 0 && k == i) continue;
          if (P[k] + H[k][j] < P[j]) {
            // if (j == 0) cout << k << ' ' << P[k] << endl;
            if (j == 4) cout << k << ' ' << P[k] << endl;
            P[j] = P[k] + H[k][j];
            flg = true;
          }
        }
      }
    }
    fans = min(fans, P[0]);
  }
  if (fans > 10000) cout << -1 << endl;
  else cout << fans << endl;
  return 0;
}

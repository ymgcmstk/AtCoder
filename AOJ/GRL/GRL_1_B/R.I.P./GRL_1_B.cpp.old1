// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define MOD 1000000007
using namespace std;

template <typename T> void input_array(T * p){
  int a = sizeof(p) / sizeof(p[0]);
  rep(i, a){
    cin >> p[i];
  }
}

void input_vector(vector<int> * p, int a){
  rep(i, a){
    int input;
    cin >> input;
    p -> push_back(input);
  }
}

template <typename T>
void output(T a, int precision) {
  if (precision > 0) {
    cout << setprecision(precision)  << a << "\n";
  } else {
    cout << a << "\n";
  }
}

struct Edge {
  int from, to, cost;
  Edge(int from, int to, int cost) : from(from), to(to), cost(cost) {}
};
typedef vector<Edge> Edges;
int main() {
  int V, E, r;
  Edges Es;
  cin >> V >> E >> r;
  int D[V];
  fill(D, D+V, MOD);
  int s, t, d;
  rep(i, E) {
    cin >> s >> t >> d;
    Es.push_back(Edge(s, t, d));
  }
  bool flg = true;
  D[r] = 0;

  while (flg) {
    flg = false;
    rep(i, E) {
      if (D[Es[i].to] > D[Es[i].from] + Es[i].cost) {
        flg = true;
        D[Es[i].to] = D[Es[i].from] + Es[i].cost;
      }
    }
    if (D[r] < 0) {
      cout << "NEGATIVE CYCLE" << endl;
    }
  }
  rep(i, V) {
    if (D[i] == MOD) cout << "INF" << endl;
    else cout << D[i] << endl;
  }
  return 0;
}

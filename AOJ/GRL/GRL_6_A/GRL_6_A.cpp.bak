// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define MOD 1000000007
using namespace std;

template <typename T> void input_array(T * p){
  int a = sizeof(p) / sizeof(p[0]);
  rep(i, a){
    cin >> p[i];
  }
}

void input_vector(vector<int> * p, int a){
  rep(i, a){
    int input;
    cin >> input;
    p -> push_back(input);
  }
}

template <typename T>
void output(T a, int precision) {
  if (precision > 0) {
    cout << setprecision(precision)  << a << "\n";
  } else {
    cout << a << "\n";
  }
}

struct Edge {
  int to, cost;
  Edge (int to, int cost) : to(to), cost(cost) {}
};
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

vector<int> dijkstra(Graph G, vector<int> &par, int start=0, int end=-1, bool is_directed=true) {
  if (!is_directed) {
    int edge_num[G.size()];
    rep(i, G.size()) edge_num[i] = G[i].size();
    rep(i, G.size()) rep(j, edge_num[i]) G[G[i][j].to].push_back(Edge(i, G[i][j].cost));
  }
  vector<int> d(G.size());
  fill(d.begin(), d.end(), MOD);
  par = vector<int>(G.size());
  fill(par.begin(), par.end(), -1);
  priority_queue<pair<int, pair<int, int> >, vector<pair<int, pair<int, int> > >, greater<pair<int, pair<int, int> > > > pq;
  rep(i, G[start].size()) pq.push(make_pair(G[start][i].cost, make_pair(G[start][i].to, start)));
  set<int> S;
  S.insert(start);
  while (S.size() < G.size() && pq.size() > 0) {
    pair<int, pair<int, int> > temp_p = pq.top();
    pq.pop();
    if (S.find(temp_p.second.first) != S.end()) continue;
    S.insert(temp_p.second.first);
    d[temp_p.second.first] = temp_p.first;
    par[temp_p.second.first] = temp_p.second.second;
    rep(i, G[temp_p.second.first].size()) {
      if (S.find(G[temp_p.second.first][i].to) != S.end()) continue;
      pq.push(make_pair(min(G[temp_p.second.first][i].cost, d[temp_p.second.first]), make_pair(G[temp_p.second.first][i].to, temp_p.second.first)));
    }
    if (S.find(end) != S.end()) break;
  }
  return d;
}


int main() {
  int V, E;
  cin >> V >> E;
  Graph G;
  rep(i, V) G.push_back(Edges());
  int u, v, c;
  rep(i, E) {
    cin >> u >> v >> c;
    G[u].push_back(Edge(v, c));
  }
  int cur_sum = 0;
  int cur_ind, prev_ind;
  vector<int> d = vector<int>(V);
  fill(d.begin(), d.end(), MOD);
  while (d[V-1] > 0) {
    vector<int> par;
    d = dijkstra(G, par, 0, V);
    cur_sum += d[V-1];
    rep(i, V) cout << d[i] << endl;
    cout << endl;
    rep(i, V) cout << par[i] << endl;
    cout << endl;
    cur_ind = par[V-1];
    prev_ind = V-1;
    while (cur_ind >= 0) {
      rep(i, G[cur_ind].size()) {
        if (G[cur_ind][i].to == prev_ind) {
          G[cur_ind][i].cost -= d[V-1];
          prev_ind = cur_ind;
          cur_ind = par[cur_ind];
          break;
        }
      }
    }
  }
  cout << cur_sum << endl;
  return 0;
}

// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define MOD 1000000007

using namespace std;

template <typename T> void input_array(T * p){
  int a = sizeof(p) / sizeof(p[0]);
  rep(i, a){
    cin >> p[i];
  }
}

void input_vector(vector<int> * p, int a){
  rep(i, a){
    int input;
    cin >> input;
    p -> push_back(input);
  }
}

template <typename T>
void output(T a, int precision) {
  if (precision > 0) {
    cout << setprecision(precision)  << a << "\n";
  } else {
    cout << a << "\n";
  }
}

struct Edge {
  int to, cost;
  Edge () {}
  Edge (int to, int cost): to(to), cost(cost) {}
};

typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

int main() {
  int V, E, r;
  int INF = (1 << 31) - 1;
  // cout << "AAA" << endl;
  cin >> V >> E >> r;
  // cout << "V: " << V << " E: " << E << " r: " << r << endl;
  Graph G;
  int s, t, d;
  rep(i, V) {
    G.push_back(Edges());
  }
  rep(i, E) {
    cin >> s >> t >> d;
    //cout << "S: " << s << " T: " << t << " D: " << d << " i: " << i << endl;
    G[s].push_back(Edge(t, d));
  }
  priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
  set<int> S;
  int D[V];
  fill(D, D+V, INF);
  S.insert(r);
  rep(i, G[r].size()) {
    pq.push(make_pair(G[r][i].cost, G[r][i].to));
  }
  D[r] = 0;

  int fans = 0;
  // int temp = 0;
  while (S.size() < V || pq.size() > 0) {
    // cout << temp << ":" << pq.size() << endl;
    // temp++;
    pair<int, int> edge_cost_to = pq.top();
    pq.pop();
    int to = edge_cost_to.second;
    if (S.find(to) != S.end()) continue;
    S.insert(to);
    D[to] = edge_cost_to.first;
    fans += D[to];
    rep(i, G[to].size()) {
      pq.push(make_pair(G[to][i].cost + D[to], G[to][i].to));
    }
  }
  rep(i, V) {
    if (D[i] == INF) cout << "INF" << endl;
    else cout << D[i] << endl;
  }
  return 0;
}

// This template is based on http://ctylim.hatenablog.com/entry/2015/08/30/191553, provided by ctylim.
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <queue>
#include <stack>
#include <utility>

#define repd(i,a,b) for (int i=(a);i<(b);i++)
#define mrepd(i,a,b) for (int i=(b-1);i>=(a);i--)
#define rep(i,n) repd(i,0,n)
#define mrep(i,n) mrepd(i,0,n)
#define LL long long
#define MOD 1000000007
using namespace std;

template <typename T>
void show_array(T arr[]) {
  rep(i, sizeof(*arr)/sizeof(arr[0])) cout << arr[i] << ' ';
  cout << endl;
}


template <typename T>
void show_vec(vector<T> vec) {
  rep(i, vec.size()) cout << vec[i] << ' ';
  cout << endl;
}

bool debug_mode = false;

class Node {
  Node *left;
  Node *right;
  int val;
public:
  Node(string cur, Node *root) {
    this->val = this->transform(cur);
    this->left  = root;
    this->right = root;
  }
  Node(int _val, Node *root) {
    this->val = _val;
    this->left  = root;
    this->right = root;
  }
  void add_left(Node *node) {
    this->left = node;
  }
  void add_right(Node *node) {
    this->right = node;
  }
  int get_val() {
    return this->val;
  }
  Node * get_left() {
    return this->left;
  }
  Node * get_right() {
    return this->right;
  }
  int transform(string cur) {
    int ans = 0;
    int cur_const = 1;
    rep(i, cur.length()) {
      ans += int(cur[i] - 'A' + 1) * cur_const;
      cur_const *= 5;
    }
    return ans;
  }
};

int transform(string cur) {
  int ans = 0;
  int cur_const = 1;
  rep(i, cur.length()) {
    ans += int(cur[i] - 'A' + 1) * cur_const;
    cur_const *= 5;
  }
  return ans;
}

bool find_node(int _val, Node * cur_root) {
  if (cur_root->get_val() < _val) {
    if (cur_root->get_right()->get_val() == -1) {
      return false;
    } else {
      return find_node(_val, cur_root->get_right());
    }
  } else if (cur_root->get_val() > _val) {
    if (cur_root->get_left()->get_val() == -1) {
      return false;
    } else {
      return find_node(_val, cur_root->get_left());
    }
  } else {
    return true;
  }
}

void insert_node(Node * targ_node, Node * cur_root) {
  if (cur_root->get_val() < targ_node->get_val()) {
    if (cur_root->get_right()->get_val() == -1) {
      cur_root->add_right(targ_node);
    } else {
      insert_node(targ_node, cur_root->get_right());
    }
  } else if (cur_root->get_val() > targ_node->get_val()) {
    if (cur_root->get_left()->get_val() == -1) {
      cur_root->add_left(targ_node);
    } else {
      insert_node(targ_node, cur_root->get_left());
    }
  }
}

int main() {
  int N;
  cin >> N;
  string temp1, temp2;
  Node *root;
  root = new Node(-1, root);
  root->add_right(root);
  root->add_left(root);
  rep(i, N) {
    cin >> temp1;
    cin >> temp2;
    if (temp1 == "insert") {
      insert_node(new Node(temp2, root), root);
    } else if (temp1 == "find") {
      if (find_node(transform(temp2), root)) cout << "yes" << endl;
      else cout << "no" << endl;
    } else {
      cout << "ERROR" << endl;
      return 0;
    }
  }
  return 0;
}
